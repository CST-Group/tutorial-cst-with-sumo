/*******************************************************************************
 * Copyright (c) 2016  DCA-FEEC-UNICAMP
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v3
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl.html
 * <p>
 * Contributors:
 * E. M. Froes, R. R. Gudwin - initial API and implementation
 ******************************************************************************/

package br.unicamp.tutorialsumo.codelets.motivational.drives;

import br.unicamp.cst.core.entities.MemoryObject;
import br.unicamp.cst.core.exceptions.CodeletActivationBoundsException;
import br.unicamp.cst.motivational.Drive;
import br.unicamp.cst.motivational.DriveLevel;
import br.unicamp.tutorialsumo.constants.MemoryObjectName;

/**
 * Traffic Light Drive is class that measures activation driven by occupancy and mean velocity in lane.
 */
public class TrafficDrive extends Drive {

    private MemoryObject vehiclesMO;
    private MemoryObject occupancyMO;
    private MemoryObject meanVelocityMO;
    private MemoryObject maxVelocityMO;

    /**
     * Traffic Drive Constructor.
     * @param name
     * @param level
     * @param priority
     * @param relevance
     * @throws CodeletActivationBoundsException
     */
    public TrafficDrive(String name, DriveLevel level, double priority, double relevance) throws CodeletActivationBoundsException {
        super(name, level, priority, relevance);
    }

    /**
     * Here we calculate simple activation because traffic drive is low level drive. The LaneHelpGoal class use this class to calculate
     * its votes.
     * @return
     */
    @Override
    public synchronized double calculateSimpleActivation() {

        return Math.max(Double.parseDouble(getOccupancyMO().getI().toString()),
                                                (0.55 * Double.parseDouble(getOccupancyMO().getI().toString()) +
                                                 0.45 * calcMeanVelocityActivation(Double.parseDouble(getMeanVelocityMO().getI().toString()),
                                                                                  Double.parseDouble(getMaxVelocityMO().getI().toString()))));
    }


    /**
     * This method is responsible for calculate activation is generated by mean velocity.
     * @param dMeanVelocity
     * @param dMaxVelocity
     * @return
     */
    public synchronized double calcMeanVelocityActivation(double dMeanVelocity, double dMaxVelocity)
    {
        return (1 - dMeanVelocity/dMaxVelocity);
    }

    @Override
    public synchronized double calculateSecundaryDriveActivation() {
        return 0;
    }

    /**
     * This method is responsible for access the input and output memories of traffic drive.
     */
    @Override
    public void accessMemoryObjects() {

        if(getVehiclesMO() ==null)
            setVehiclesMO(this.getInput(MemoryObjectName.LANE_VEHICLES_ID_LIST.toString(), 0));

        if(getOccupancyMO() == null)
            setOccupancyMO(this.getInput(MemoryObjectName.LANE_OCCUPANCY.toString(), 0));

        if(getMeanVelocityMO() == null)
            setMeanVelocityMO(this.getInput(MemoryObjectName.LANE_MEAN_VELOCITY.toString(), 0));

        if(getMaxVelocityMO() == null)
            setMaxVelocityMO(this.getInput(MemoryObjectName.LANE_MAX_VELOCITY.toString(), 0));

    }

    /**
     * Action that is performed by traffic drive, but here we don't use.
     */
    @Override
    public void proc() {

    }

    /**
     * Gets Vehicles Memory Object.
     * @return
     */
    public MemoryObject getVehiclesMO() {
        return vehiclesMO;
    }

    /**
     * Sets Vehicles Memory Object.
     * @param vehiclesMO
     */
    public void setVehiclesMO(MemoryObject vehiclesMO) {
        this.vehiclesMO = vehiclesMO;
    }

    /**
     * Gets Occupancy Memory Object.
     * @return
     */
    public MemoryObject getOccupancyMO() {
        return occupancyMO;
    }

    /**
     * Sets Occupancy Memory Object.
     * @param occupancyMO
     */
    public void setOccupancyMO(MemoryObject occupancyMO) {
        this.occupancyMO = occupancyMO;
    }

    /**
     * Gets Mean Velocity Memory Object.
     * @return
     */
    public MemoryObject getMeanVelocityMO() {
        return meanVelocityMO;
    }

    /**
     * Sets Mean Velocity Memory Object.
     * @param meanVelocityMO
     */
    public void setMeanVelocityMO(MemoryObject meanVelocityMO) {
        this.meanVelocityMO = meanVelocityMO;
    }

    /**
     * Gets Max Velocity Memory Object.
     * @return
     */
    public MemoryObject getMaxVelocityMO() {
        return maxVelocityMO;
    }

    /**
     * Sets Max Velocity Memory Object.
     * @param maxVelocityMO
     */
    public void setMaxVelocityMO(MemoryObject maxVelocityMO) {
        this.maxVelocityMO = maxVelocityMO;
    }
}
